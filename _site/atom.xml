<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>{SA}</title>
 <link href="http://username.github.io/" rel="self"/>
 <link href="http://username.github.io"/>
 <updated>2014-09-22T19:18:32+02:00</updated>
 <id>http://username.github.io</id>
 <author>
   <name>Simen Andresen</name>
   <email>simena86@gmail.com</email>
 </author>

 
 <entry>
   <title>Automatically Set Desktop Background to newest XKCD Comic Strip Using Python</title>
   <link href="http://username.github.io/blog/2013/09/06/master-project-procrastination-part-1-set-desktop-background-to-newest-xkcd-comic-strip"/>
   <updated>2013-09-06T13:48:00+02:00</updated>
   <id>http://username.github.io/blog/2013/09/06/master-project-procrastination-part-1-set-desktop-background-to-newest-xkcd-comic-strip</id>
   <content type="html">&lt;p&gt;This semester I’m writing my master’s project, which seems to be a time when procrastination thrives. When setting up Ubuntu on my school PC i had to decide what to use for desktop image. I therefore wrote a script to update the desktop background to the most recent &lt;a href=&quot;http://www.xkcd.com&quot;&gt;XKCD&lt;/a&gt; comic strip:&lt;/p&gt;

&lt;!-- more --&gt;

&lt;script src=&quot;https://gist.github.com/simena86/f4b464575419e38f61f3.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The script fetches the image of the comic and the mouseover text. The mouseover text is rendered as an image and finally stitched together with the comic image.
If your’re using a Unix based OS you can schedule the script to run e.g. every  Monday, Wednesday and Friday using &lt;a href=&quot;http://www.adminschoice.com/crontab-quick-reference/&quot;&gt;crontab&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The source can be found in my &lt;a href=&quot;https://github.com/simena86/xkcdDesktop&quot;&gt;github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/xkcd.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Hand Tracking And Recognition with OpenCV</title>
   <link href="http://username.github.io/blog/2013/08/12/hand-tracking-and-recognition-with-opencv"/>
   <updated>2013-08-12T21:52:00+02:00</updated>
   <id>http://username.github.io/blog/2013/08/12/hand-tracking-and-recognition-with-opencv</id>
   <content type="html">&lt;p&gt;Computer Vision is in many ways the ultimate sensor, and has endless potential applications to robotics. Me and 2 classmates (Vegar Østhus and Martin Stokkeland ) did a project in Computer Vision at UCSB and wrote a program to recognize and track finger movements.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Below is a flowchart representation of the program&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/handRecognition/gesture_flowchart.png&quot; width=&quot;400&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The hand tracking is based on color recognition. The program is therefore initialized by sampling color from the hand:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/handRecognition/waitforpalm.png&quot; width=&quot;600&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The hand is then extracted from the background by using a threshold using the sampled color profile.
Each color in the profile produces a binary image which in turn are all summed together. A nonlinear median filter is then applied to get a smooth and noise free binary representation of the hand. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/handRecognition/binary.png&quot; width=&quot;600&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the binary representation is generated the hand is processed in the following way:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/handRecognition/contour.png&quot; width=&quot;600&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The properties determining whether  a convexity defect is to be dismissed is the angle between the lines going 	from the defect to the neighbouring convex polygon vertices&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/handRecognition/handangle.png&quot; width=&quot;300&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The defect is dismissed if:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[

\begin{aligned}
length &lt; 0.4l_{bb} \\
angle &gt; 80^o
\end{aligned}
 %]]&gt;&lt;/script&gt;

&lt;p&gt;The analyzis results in data that can be of further use in gesture recognition:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fingertip positions &lt;/li&gt;
  &lt;li&gt;Number of fingers &lt;/li&gt;
  &lt;li&gt;Number of hands  &lt;/li&gt;
  &lt;li&gt;Area of hands &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source code can be found &lt;a href=&quot;https://github.com/simena86/handDetectionCV&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/handRecognition/final_result.png&quot; width=&quot;600&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;http://www.youtube.com/embed/o3LSOq6OC4I?color=white&amp;amp;theme=light&quot;&gt;&lt;/iframe&gt;

</content>
 </entry>
 
 <entry>
   <title>My Vim Setup</title>
   <link href="http://username.github.io/blog/2013/04/12/my-vim-setup"/>
   <updated>2013-04-12T20:03:00+02:00</updated>
   <id>http://username.github.io/blog/2013/04/12/my-vim-setup</id>
   <content type="html">&lt;p&gt;Vim is a very popular text editor for Unix-like systems, written by Bram Moolenaar. I have been using Vim for a couple of years now and have found some nice features that make it more efficient for my use.  &lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;basics&quot;&gt;Basics&lt;/h2&gt;

&lt;p&gt;First of all one should look into the root configuration file /etc/vim/vimrc.
I uncommented some things here that I found useful, like for instance &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;showcmd&lt;/span&gt;		&lt;span class=&quot;c&quot;&gt;&amp;quot; Show (partial) command in status line.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;showmatch&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;&amp;quot; Show matching brackets.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ignorecase&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;&amp;quot; Do case insensitive matching&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;&amp;quot; Hide buffers when they are abandoned&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mouse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;a&lt;/span&gt;		&lt;span class=&quot;c&quot;&gt;&amp;quot; Enable mouse usage (all modes)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For the rest of the changes i updatet .vimrc and the .vim folder in the home directory. In my ~/.vimrc I have some basic commands :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; plugin &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nocp&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;autoindent&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cindent&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;nu&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;scrolloff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;clipboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;unnamedplus&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This changes things like the lenght of the indentation (which I found to be way too long with the default setup), as well as enabling plugins, setting the right clipboard etc.&lt;/p&gt;

&lt;h2 id=&quot;plugins&quot;&gt;Plugins&lt;/h2&gt;

&lt;p&gt;This is where it gets interesting. There is alot of plugins out there and I’ve found some really nice ones. 
&lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=2332&quot; title=&quot;Pathogen&quot;&gt;Pathogen&lt;/a&gt; is used to make dealing with plugins very easy. To make this work follow the instructions from the plugin page and remember to add the following to ~/.vimrc :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;execute pathogen#infect&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;cc&quot;&gt;C/C++&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://ctags.sourceforge.net/&quot;&gt;Exuberant Ctags&lt;/a&gt; is another great plugin that makes a tags database wich is used by vim to autocomplete variables and functions. Together with &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=1764&quot;&gt;code_complete&lt;/a&gt; and &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=1520&quot;&gt;omniCppComplete&lt;/a&gt; it also offers autocompletion of function parameters and class and struct members much the same way that can be found with IDE’s like eclipse:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/vim/autocomplete.png&quot; width=&quot;420&quot; height=&quot;200&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you’re running a debian systems the easiest way to install ctags is to use&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;sudo apt&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; install exuberant&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;ctags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Code_complete can just be downloaded &lt;a href=&quot;http://www.vim.org/scripts/script.php?script_id=1764&quot;&gt;here&lt;/a&gt; and placed in the ~/.vim/plugin/ directory.&lt;/p&gt;

&lt;p&gt;To use these plugins tag-files is made by generating tags based on source code files. Im using the following command to do this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ctags -R * --c++-kinds&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+p --fields&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+iaS --extra&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+q&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When executing this command it will generate a file in the current directory and make tags based on all source code in the current and all subdirectories. The tag file is used by ctags, code_complete and omniCppComplete. To let vim know where to look for tag files on has to specify this in vimrc by &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/tagdir1
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;tags+&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/tagdir2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ctags searches for tag-files which is specified in ~/.vimrc. I’m using the following in my .vimrc file to look for tag files &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/include/tags
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;tags+&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;./tags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Lastly I use git hooks to update tag files in projects. The best way to do this is to first make the directory ~/.git_template where you can define templates for git to use every time you run git init. In the .git_templates directory I have a directory for &lt;a href=&quot;http://git-scm.com/book/en/Customizing-Git-Git-Hooks&quot;&gt;git hooks&lt;/a&gt; with two files: _    &lt;/p&gt;

&lt;p&gt;post-commit:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
.git/hooks/ctags &amp;gt;/dev/null 2&amp;gt;&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ctags:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -e
&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/usr/local/bin:$PATH&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;rm -f .git/tags.$$&amp;quot;&lt;/span&gt; EXIT
ctags  --c++-kinds&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+p --fields&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+iaS --extra&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;+q --tag-relative -Rf.git/tags.&lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;  --exclude&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.git --languages&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-javascript,sql
mv .git/tags.&lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt; .git/tags&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With these scripts you will generate a new tag file in the local .git directory of the current project every time you make a commit. &lt;/p&gt;

&lt;h3 id=&quot;python&quot;&gt;Python&lt;/h3&gt;

&lt;p&gt;For python source code I use the wonderful jedi-vim. Which is a really great and advanced plugin, providing the same functionality ctags and omniCppComplete provides for C/C++. &lt;/p&gt;

&lt;p&gt;Install it with the following&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.vim/bundle/&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
git clone git://github.com/davidhalter/jedi-vim.git&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;jedi-vim&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
git submodule update --init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I also found installing supertab useful&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.vim/bundle/&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
git clone git://github.com/ervandew/supertab.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To configure jedi-vim and supertab, put the following in your .vimrc file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:SuperTabDefaultCompletionType &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;context&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:jedi#popup_on_dot &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;  # disables the autocomplete &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;popup&lt;/span&gt; whenever you press .
&lt;span class=&quot;nb&quot;&gt;syntax&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; plugin indent &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Auto login WiFi – University, Hotels etc</title>
   <link href="http://username.github.io/blog/2013/01/26/auto-login-wifi-university"/>
   <updated>2013-01-26T01:23:00+01:00</updated>
   <id>http://username.github.io/blog/2013/01/26/auto-login-wifi-university</id>
   <content type="html">&lt;p&gt;When using the University WiFi I found it annoying that I always had to login through a browser using my university username and password. Using the simple scripts below, this bothersome procedure can be done automatically each time the computer discovers a network.
&lt;!-- more --&gt;
I am using Wicd Network Manager, which has a nice feature where one can include scripts that you want to run when the computer connects and disconnects to a network ( see wicd documentation). Using this feature I made a short script to run different tasks when the computer discovered different Wifi’s. I have a file called perform_on_post_connect.sh in the directory /etc/wicd/scripts/postconnect on my linux machine with the following code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/simena86/c7341285d34637b9212b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;I then wrote a python script called foo_autologin.py that performs the nessecary login procedure. If I am not mistaken, with Wicd one has to have this in a directory with only root access. The source for foo_autologin.py:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/simena86/3007e02416461d849330.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;When using the code above one has to use the headers and data used in the post method. The way I got the data from a login to the university was through using a Firefox Extension called Live HTTP Headers, as I found that chrome would not show HTTP traffic for HTTPS sites.&lt;/p&gt;

&lt;p&gt;After monitoring a login using Live HTTP headers one can fill in the headers and data. Im sure there is a way of automating this task So feel free to share.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Logging Accelerometer from Android to PC</title>
   <link href="http://username.github.io/blog/2012/04/30/logging-accelerometer-from-android-to-pc"/>
   <updated>2012-04-30T22:09:00+02:00</updated>
   <id>http://username.github.io/blog/2012/04/30/logging-accelerometer-from-android-to-pc</id>
   <content type="html">&lt;p&gt;I am pretty new to Android and decided to play around with the sensors. I always find accelerometers fun to play with, and like to visualize the sensor reading through a real time plot. In the java-script for the android app below, the acceleration in the x axis is read and streamed through a TCP socket to the PC over wlan. A simple python server script reads the data from a socket and writes it to a perl script, logging the data in GnuPlot, and thus setting my personal record for mixing different languages.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img src=&quot;http://sacybernetics.files.wordpress.com/2012/06/2012-06-03-23-07-43.png&quot; width=&quot;300&quot; height=&quot;380&quot; /&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;http://www.youtube.com/embed/OOufu8sdyKA?color=white&amp;amp;theme=light&quot;&gt;&lt;/iframe&gt;

&lt;script src=&quot;https://gist.github.com/simena86/b076b4ebb61d5268823b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The simple python server script below opens a TCP socket and receives the readings from the Android app over WLAN. Note that the python script reads the last entry in the receive buffer, which then makes up a LIFO que, and no timestamp is added to the reading. For a signal analysis one would add a time stamp and a FIFO que should be used instead. For debugging and pure fun, the method I used is still pretty sufficient.
`
The plotting is excecuted with piping the output from the python script to the perl script in the linux terminal:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./server.py &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; ./driveGnuPlot.pl &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Accelerometer Reading&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Python server :&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/simena86/6e2c0c6e8c35b0ac8e05.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And lastly the python script pipes data to a Perl script written by Thanassis Tsiodras.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/simena86/8da192563c98405ed02f.js&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 
 <entry>
   <title>JOGL - Animation and Dynamics of Furuta pendulum</title>
   <link href="http://username.github.io/blog/2012/01/24/jogl-animation-and-dynamics-of-furuta-pendulum"/>
   <updated>2012-01-24T20:44:00+01:00</updated>
   <id>http://username.github.io/blog/2012/01/24/jogl-animation-and-dynamics-of-furuta-pendulum</id>
   <content type="html">&lt;p&gt;I wanted to animate a furuta pendulum, and include the real dynamics in the animation. First off, what is a Furuta pendulum? It is a pendulum with two degrees of freedom (see wikipedia) where, from a control engineers’ point of view, one is interested in stabilizing the second arm of the pendulum, by applying torque to the first arm. This poses quite an interesting control problem (much the same as in e.g. a segway). First lets look at the dynamimcs of the furuta pendulum:
&lt;!-- more --&gt; &lt;/p&gt;

&lt;p&gt;The dynamics of the furuta pendulum can be modeled with two second order differential equations. For simulations we will reduce the order and model the system with 4 first order ODE’s. The following state space vector will be used:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[

 \begin{aligned} x=\begin{bmatrix} \\ \frac{d\theta_{1}}{dt} &amp; \frac{d\theta_1}{dt}&amp; \theta_{1}&amp;\theta_{2}\end{bmatrix}  \end{aligned}
 %]]&gt;&lt;/script&gt;

&lt;p&gt;With the use of Lagrangian or Newton dynamics one can model the system which yields the following 2. order ODE’s:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[

\; \\ \; \\ \;
{ \scriptsize
\begin{aligned}
&amp; \frac{d^2\theta_1}{dt^2}= \\
&amp;  \frac{ (mx_1^2cos(x_4)
sin(x_4)^3L_2^3+(gmsin(x_4)^3-2mx_1x_2cos(x_4)^2sin(x_4)L_1)L_2^2+((mx_1^2-mx_2^2)cos(x_4)sin(x_4)L_1^2+x_1^2cos(x_4)sin(x_4)J_1)
L_2+gmsin(x_4)L_1^2+\tau cos(x_4)L_1+gsin(x_4)J_1)}{(msin(x_4)^2L_2^3+((m-mcos(x_4)^2)L_1^2+J_1)L_2)}
\\
&amp;\frac{d^2\theta_2}{dt^2}=\\
&amp; \frac{(mx_1^2cos(x_4) 
sin(x_4)^3L_2^3+(gmsin(x_4)^3-2mx_1x_2cos(x_4)^2sin(x_4)L_1)L_2^2+((mx_1^2-mx_2^2)cos(x_4)sin(x_4)L_1^2+x_1^2cos(x_4)sin(x_4)J_1)
L_2+gmsin(x_4)L_1^2+taucos(x_4)L_1+gsin(x_4)J_1)}{(msin(x_4)^2L_2^3+((m-mcos(x_4)^2)L_1^2+J_1)L_2)}
\end{aligned}
}
 %]]&gt;&lt;/script&gt;

&lt;p&gt;The following state space equations used in the simulation is therefor&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\dot{x}= \begin{bmatrix}\ddot{\theta}_1 \\ \ddot{\theta}_2 \\ \theta_1 \\ \theta_2 \end{bmatrix} = f(x)
&lt;/script&gt;

&lt;p&gt;And one can easily solve the dynamics by numerical integration. I have solved the system using Explicit Runge Kutta 4 which yields a discrete solution that can easily be used in a OpenGl 3d animation. The main idea for capturing the dynamics in the animation is to, in  each call to the display() function (each new frame of the animation), calculate the next iterate of the numerical integrator (RK4 in this case). This can be seen in the code below, where &lt;script type=&quot;math/tex&quot;&gt; f_1=\ddot{\theta}_1 &lt;/script&gt; and f2, f3,f4 (not shown in the code) each calculates their derrivatives which is used in one multiple input, multiple output function f. Lastly this is used in solve_dyn() to calculate an iterate from the RK4 method.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/simena86/1cae25be89a82e4a650d.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The animation:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;420&quot; src=&quot;http://www.youtube.com/embed/Lmvn_uDE4HE?color=white&amp;amp;theme=light&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;The source can now be cloned from git &lt;a href=&quot;https://github.com/simena86/furuta_pendulum&quot; title=&quot;gitlink&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>